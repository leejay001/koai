@file:Suppress("DEPRECATION")

package com.lee.openai.api.chat

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.databind.node.ObjectNode
import com.lee.net.httpclient.safeJackson
import com.lee.openai.anotations.BetaOpenAI
import com.lee.openai.anotations.OpenAIDsl
import com.lee.openai.api.core.Parameters
import com.lee.openai.api.model.ModelId

/**
 * Creates a completion for the chat message.
 */
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
public class ChatCompletionRequest(
    /**
     * ID of the model to use.
     * see [ModelId]
     */
    @JsonProperty("model") public val model: String?,

    /**
     *see [ReasoningEffort]
     * but for deep seek stays null for now - 20250226
     */
    @JsonProperty("reasoning_effort") val reasoningEffort: String? = null,

    /**
     * The messages to generate chat completions for.
     */
    @JsonProperty("messages") public val messages: List<AIChatMessage>,

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
     * while lower values like 0.2 will make it more focused and deterministic.
     *
     * We generally recommend altering this or [topP] but not both.
     */
    @JsonProperty("temperature") public val temperature: Double? = null,

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results
     * of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     *
     * We generally recommend altering this or [temperature] but not both.
     */
    @JsonProperty("top_p") public val topP: Double? = null,

    /**
     * How many chat completion choices to generate for each input message.
     */
    @JsonProperty("n") public val n: Int? = null,

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    @JsonProperty("stop") public val stop: List<String>? = null,

    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can
     * return will be (4096 - prompt tokens).
     */
    @Deprecated(
        "Use max_completion_tokens instead,The maximum number of tokens that can be generated in the chat completion. This value can be used to control costs for text generated via API.\n" +
                "\n" +
                "This value is now deprecated in favor of max_completion_tokens, and is not compatible with o1 series models."
    )
    @JsonProperty("max_tokens") public val maxTokens: Int? = null,

    /**
     * The maximum number of tokens allowed for the generated answer. deep seek will still use max_tokens
     */
    @JsonProperty("max_completion_tokens") public val maxCompletionTokens: Int? = null,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.
     *
     * [Read more](https://platform.openai.com/docs/api-reference/parameter-details)
     */
    @JsonProperty("presence_penalty") public val presencePenalty: Double? = null,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so
     * far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * [Read more](https://platform.openai.com/docs/api-reference/parameter-details)
     */
    @JsonProperty("frequency_penalty") public val frequencyPenalty: Double? = null,

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    @JsonProperty("logit_bias") public val logitBias: Map<String, Int>? = null,

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
     */
    @JsonProperty("user") public val user: String? = null,

    /**
     * A list of functions the model may generate JSON inputs for.
     */
//    @Deprecated(message = "Deprecated in favor of tools")
//    @JsonProperty("functions") public val functions: List<ChatCompletionFunction>? = null,

    /**
     * Controls how the model responds to function calls. [FunctionMode.None] means the model does not call a function,
     * and responds to the end-user.
     * [FunctionMode.Auto] means the model can pick between an end-user or calling a function.
     * Specifying a particular function via [FunctionMode.Named] forces the model to call that function.
     * [FunctionMode.None] is the default when no functions are present.
     * [FunctionMode.Auto] is the default if functions are present.
     */
//    @Deprecated(message = "Deprecated in favor of ToolChoice")
//    @JsonProperty("function_call") public val functionCall: FunctionMode? = null,

    /**
     * An object specifying the format that the model must output.
     *
     * Setting to [ChatResponseFormat.JsonObject] enables JSON mode, which guarantees the message the model generates is
     * valid JSON.
     *
     * **Important**: when using JSON mode, you must still instruct the model to produce JSON yourself via some
     * conversation message, for example, via your system message. If you don't do this, the model may generate
     * an unending stream of whitespace until the generation reaches the token limit, which may take a lot of time
     * and give the appearance of a "stuck" request. Also note that the message content may be partial (i.e., cut off)
     * if finish_reason="length", which indicates the generation exceeded `max_tokens` or the conversation exceeded
     * the max context length.
     */
    @JsonProperty("response_format") public val responseFormat: ChatResponseFormat? = null,

    /**
     * A list of tools the model may call. Use this to provide a list of functions the model may generate JSON inputs for.
     */
    @JsonProperty("tools") public val tools: List<Tool>? = null,

    /**
     * Controls which (if any) function is called by the model.
     *
     * - [ToolChoice.None] means the model will not call a function and instead generates a message.
     * - [ToolChoice.Auto] means the model can pick between generating a message or calling a function.
     * - Specifying a particular function via [ToolChoice.Named] (or [ToolChoice.function]) forces the model to call that function.
     *
     * [ToolChoice.None] is the default when no functions are present.[ToolChoice.Auto] is the default if functions are
     * present.
     */
    @JsonProperty("tool_choice") public val toolChoice: ToolChoice? = null,

    /**
     * If specified, our system will make the best effort to sample deterministically, such that repeated requests with
     * the same seed and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `systemFingerprint` response parameter to monitor
     * changes in the backend.
     */
    @property:BetaOpenAI
    @JsonProperty("seed") public val seed: Int? = null,

    /**
     * Whether to return log probabilities of the output tokens or not. If true,
     * returns the log probabilities of each output token returned in the content of message.
     */
    @JsonProperty("logprobs") public val logprobs: Boolean? = null,

    /**
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position,
     * each with an associated log probability. logprobs must be set to true if this parameter is used.
     */
    @JsonProperty("top_logprobs") public val topLogprobs: Int? = null,

    @JsonProperty("stream") public val stream: Boolean = false

)

/**
 * The messages to generate chat completions for.
 */
public fun chatCompletionRequest(block: ChatCompletionRequestBuilder.() -> Unit): ChatCompletionRequest =
    ChatCompletionRequestBuilder().apply(block).build()


/**
 * note:
 * 1.no system msg
 * 2.temperature 0.6 for deepseek
 * 3. max token = 4096
 * 4.maxCompletionTokens set value when original openai request, maxToken set value when use deepseek
 * 5.
 */
public fun openaiReasoningRequest(
    messages: List<AIChatMessage>,
    model: String?,
    maxTokens: Int? = null,
    maxCompletionTokens: Int? = null,
    temperature: Double? = 0.6,
    reasoningEffort: ReasoningEffort? = null,
    user: String? = null,
    stream: Boolean = false
): ChatCompletionRequest =
    ChatCompletionRequest(
        model = model,
        messages = messages,
        temperature = temperature,
        user = user,
        maxTokens = maxTokens,
        maxCompletionTokens = maxCompletionTokens,
        reasoningEffort = reasoningEffort?.effort,
        stream = stream
    )

public fun openaiJsonModelRequest(
    messages: List<AIChatMessage>,
    model: String?,
    user: String? = null,
    temperature: Double? = 0.8,
    resultNum: Int = 1,
    maxTokens: Int = 4096,
    stream: Boolean = false

): ChatCompletionRequest =
    ChatCompletionRequest(
        model = model,
        messages = messages,
        temperature = temperature,
        topP = null,
        n = resultNum,
        stop = null,
        maxTokens = maxTokens,
        presencePenalty = null,
        frequencyPenalty = null,
        logitBias = null,
        user = user,
        responseFormat = ChatResponseFormat.JsonObject,
        tools = null,
        toolChoice = null,
        seed = null,
        logprobs = null,
        topLogprobs = null,
        stream = stream
    )

public fun openaiToolsRequest(
    messages: List<AIChatMessage>,
    model: String?,
    tools: List<Tool>? = null,
    toolChoice: ToolChoice = ToolChoice.Required,
    user: String? = null,
    temperature: Double? = 0.8,
    resultNum: Int = 1,
    maxTokens: Int = 4096,
    stream: Boolean = false
) = openaiCommonRequest(
    messages,
    model,
    tools,
    toolChoice,
    null,
    user, temperature, resultNum, maxTokens, stream
)

public fun openaiCommonRequest(
    messages: List<AIChatMessage>,
    model: String?,
    tools: List<Tool>? = null,
    toolChoice: ToolChoice? = null,
    responseFormat: ChatResponseFormat? = null,
    user: String? = null,
    temperature: Double? = 0.8,
    resultNum: Int = 1,
    maxTokens: Int = 4096,
    stream: Boolean = false

): ChatCompletionRequest =
    ChatCompletionRequest(
        model = model,
        messages = messages,
        temperature = temperature,
        topP = null,
        n = resultNum,
        stop = null,
        maxTokens = maxTokens,
        presencePenalty = null,
        frequencyPenalty = null,
        logitBias = null,
        user = user,
        responseFormat = responseFormat,
        tools = tools,
        toolChoice = toolChoice,
        seed = null,
        logprobs = null,
        topLogprobs = null,
        stream = stream
    )


/**
 * Creates a completion for the chat message.
 */
@OpenAIDsl
public class ChatCompletionRequestBuilder {
    /**
     * ID of the model to use.
     */
    public var model: ModelId? = null

    /**
     * The messages to generate chat completions for.
     */
    public var messages: List<AIChatMessage>? = null

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
     * while lower values like 0.2 will make it more focused and deterministic.
     *
     * We generally recommend altering this or [topP] but not both.
     */
    public var temperature: Double? = null

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results
     * of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass
     * are considered.
     *
     * We generally recommend altering this or [temperature] but not both.
     */
    public var topP: Double? = null

    /**
     * How many chat completion choices to generate for each input message.
     */
    public var n: Int? = null

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    public var stop: List<String>? = null

    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can
     * return will be (4096 - prompt tokens).
     */
    public var maxTokens: Int? = null

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.
     *
     * [Read more](https://platform.openai.com/docs/api-reference/parameter-details)
     */
    public var presencePenalty: Double? = null

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so
     * far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * [Read more](https://platform.openai.com/docs/api-reference/parameter-details)
     */
    public var frequencyPenalty: Double? = null

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    public var logitBias: Map<String, Int>? = null

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
     */
    public var user: String? = null

    /**
     * A list of functions the model may generate JSON inputs for.
     */
//    @Deprecated(message = "Deprecated in favor of tools")
//    public var functions: List<ChatCompletionFunction>? = null

    /**
     * Controls how the model responds to function calls. [FunctionMode.None] means the model does not call a function,
     * and responds to the end-user.
     * [FunctionMode.Auto] means the model can pick between an end-user or calling a function.
     * Specifying a particular function via [FunctionMode.Named] forces the model to call that function.
     * [FunctionMode.None] is the default when no functions are present.
     * [FunctionMode.Auto] is the default if functions are present.
     */
//    @Deprecated(message = "Deprecated in favor of ToolChoice")
//    public var functionCall: FunctionMode? = null

    /**
     * An object specifying the format that the model must output.
     *
     * Setting to [ChatResponseFormat.JsonObject] enables JSON mode, which guarantees the message the model generates is
     * valid JSON.
     *
     * **Important**: when using JSON mode you must still instruct the model to produce JSON yourself via some
     * conversation message, for example via your system message. If you don't do this, the model may generate
     * an unending stream of whitespace until the generation reaches the token limit, which may take a lot of time
     * and give the appearance of a "stuck" request. Also note that the message content may be partial (i.e. cut off)
     * if finish_reason="length", which indicates the generation exceeded `max_tokens` or the conversation exceeded
     * the max context length.
     */
    public var responseFormat: ChatResponseFormat? = null

    /**
     * A list of tools the model may call. Use this to provide a list of functions the model may generate JSON inputs for.
     */
    public var tools: List<Tool>? = null

    /**
     * Controls which (if any) function is called by the model.
     *
     * - [ToolChoice.None] means the model will not call a function and instead generates a message.
     * - [ToolChoice.Auto] means the model can pick between generating a message or calling a function.
     * - Specifying a particular function via [ToolChoice.Named] (or [ToolChoice.function]) forces the model to call that function.
     *
     * [ToolChoice.None] is the default when no functions are present.[ToolChoice.Auto] is the default if functions are
     * present.
     */
    public var toolChoice: ToolChoice? = null

    /**
     * Whether to return log probabilities of the output tokens or not. If true,
     * returns the log probabilities of each output token returned in the content of message.
     */
    public var logprobs: Boolean? = null

    /**
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position,
     * each with an associated log probability. logprobs must be set to true if this parameter is used.
     */
    public var topLogprobs: Int? = null


    /**
     * A list of tools the model may call. Use this to provide a list of functions the model may generate JSON inputs for.
     */
    public fun tools(block: ToolBuilder.() -> Unit) {
        tools = ToolBuilder().apply(block).functions
    }

    /**
     * A list of functions the model may generate JSON inputs for.
     */
//    @Deprecated(message = "Deprecated in favor of tools")
//    public fun functions(block: FunctionsBuilder.() -> Unit) {
//        functions = FunctionsBuilder().apply(block).functions
//    }

    /**
     * Builder of [ChatCompletionRequest] instances.
     */
    public fun build(): ChatCompletionRequest = ChatCompletionRequest(
        model = requireNotNull(model?.id) { "model is required" },
        messages = requireNotNull(messages) { "messages is required" },
        temperature = temperature,
        topP = topP,
        n = n,
        stop = stop,
        maxTokens = maxTokens,
        presencePenalty = presencePenalty,
        frequencyPenalty = frequencyPenalty,
        logitBias = logitBias,
        user = user,
        responseFormat = responseFormat,
        toolChoice = toolChoice,
        tools = tools,
        logprobs = logprobs,
        topLogprobs = topLogprobs
    )
}

/**
 * Creates a list of [ChatCompletionFunction].
 */
public class FunctionsBuilder {
    internal val functions = mutableListOf<ChatCompletionFunction>()

    /**
     * Creates a [AIChatMessage] instance.
     */
    public fun function(block: ChatCompletionFunctionBuilder.() -> Unit) {
        functions += ChatCompletionFunctionBuilder().apply(block).build()
    }
}

/**
 * Creates a list of [Tool].
 */
public class ToolBuilder {
    internal val functions = mutableListOf<Tool>()

    /**
     * Creates a [AIChatMessage] instance.
     */
    public fun tool(tool: Tool) {
        functions += tool
    }

    /**
     * Creates a 'function' tool.
     *
     * @param name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes,
     * with a maximum length of 64.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     */
    public fun function(name: String, strict: Boolean = true, description: String? = null, parameters: JsonNode) {
        functions += Tool.function(name, strict, description, parameters)
    }

    /**
     * Creates a 'function' tool.
     *
     * @param name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes,
     * with a maximum length of 64.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     */
    public fun function(name: String, strict: Boolean = true, description: String? = null, parameters: String) {
        functions += Tool.function(name, strict, description, safeJackson.readTree(parameters))
    }

    /**
     * Creates a 'function' tool.
     *
     * @param name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes,
     * with a maximum length of 64.
     * @param parameters The parameters the function accepts, described as a JSON Schema object.
     */
    public fun function(
        name: String,
        strict: Boolean = true,
        description: String? = null,
        parameters: ObjectNode.() -> Unit
    ) {
        functions += Tool.function(name, strict, description, safeJackson.createObjectNode().apply { parameters(this) })
    }
}
